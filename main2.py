import os
import logging
import requests
import asyncio
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    CallbackContext,
)
from yandex_music import Client
import speech_recognition as sr
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7805948171:AAHmbtv_ZvN5AQQam9-uOQGJG7GrRYelx-M"
YANDEX_TOKEN = "y0_AgAAAAAa5tojAAG8XgAAAADxSLamXYmdsKcIS5eWcpGT46RO-KIuwdQ"
SPOTIFY_CLIENT_ID = "db3982856e154607a2b0d379b69c826d"
SPOTIFY_CLIENT_SECRET = "8a081ba863354a6f9616e3e5d867aafd"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
yandex_client = Client(YANDEX_TOKEN).init()
spotify_client = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=SPOTIFY_CLIENT_ID, client_secret=SPOTIFY_CLIENT_SECRET))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> None:
    await show_main_menu(update)

async def show_main_menu(update: Update) -> None:
    keyboard = [
        [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞", callback_data="source_yandex")],
        [InlineKeyboardButton("Spotify", callback_data="source_spotify")],
        [InlineKeyboardButton("–î–æ–º–æ–π", callback_data="home")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –º—É–∑—ã–∫–∏:", reply_markup=reply_markup)

async def handle_source_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == "home":
        await show_main_menu(update)
    elif query.data == "source_yandex":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ:")
        context.user_data['source'] = 'yandex'
    elif query.data == "source_spotify":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Spotify:")
        context.user_data['source'] = 'spotify'

async def search(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    source = context.user_data.get('source')

    if source == 'yandex':
        await search_yandex(update, context, query)
    elif source == 'spotify':
        await search_spotify(update, context, query)
    else:
        await handle_link(update, query)

async def handle_link(update: Update, query: str) -> None:
    if "yandex" in query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –∏–∑ —Å—Å—ã–ª–∫–∏
    elif "spotify" in query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Spotify
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Spotify...")

async def search_yandex(update: Update, context: CallbackContext, query: str) -> None:
    search_result = yandex_client.search(query, type_="track")

    if not search_result.tracks:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ üò¢")
        return

    tracks = search_result.tracks.results[:7]  # –ü–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    keyboard = []
    for idx, track in enumerate(tracks):
        artists = ", ".join(artist.name for artist in track.artists)
        title = f"{artists} - {track.title}"
        keyboard.append([InlineKeyboardButton(title, callback_data=f"yandex_track_{idx}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ:", reply_markup=reply_markup)
    context.user_data["current_yandex_tracks"] = tracks

async def search_spotify(update: Update, context: CallbackContext, query: str) -> None:
    search_result = spotify_client.search(q=query, type='track', limit=7)

    if not search_result['tracks']['items']:
        await update.message.reply_text(" –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Spotify üò¢")
        return

    tracks = search_result['tracks']['items']  # –ü–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    keyboard = []
    for idx, track in enumerate(tracks):
        artists = ", ".join(artist['name'] for artist in track['artists'])
        title = f"{artists} - {track['name']}"
        keyboard.append([InlineKeyboardButton(title, callback_data=f"spotify_track_{idx}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Spotify:", reply_markup=reply_markup)
    context.user_data["current_spotify_tracks"] = tracks

async def button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data.startswith("yandex_track_"):
        idx = int(query.data.split("_")[1])
        tracks = context.user_data.get("current_yandex_tracks", [])

        if not tracks or idx >= len(tracks):
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ.")
            return

        track = tracks[idx]
        try:
            filename = download_yandex_track(track)
            with open(filename, "rb") as audio_file:
                await context.bot.send_audio(
                    chat_id=query.message.chat_id,
                    audio=audio_file,
                    title=f"{track.title}",
                    performer=", ".join(artist.name for artist in track.artists),
                )
            os.remove(filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏: {e}")
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ üò¢")

    elif query.data.startswith("spotify_track_"):
        idx = int(query.data.split("_")[1])
        tracks = context.user_data.get("current_spotify_tracks", [])

        if not tracks or idx >= len(tracks):
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Spotify.")
            return

        track = tracks[idx]
        await query.edit_message_text(f"–¢—Ä–µ–∫ –∏–∑ Spotify: {track['name']} - {', '.join(artist['name'] for artist in track['artists'])}. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

def download_yandex_track(track) -> str:
    download_info = track.get_download_info(get_direct_links=True)[0]
    direct_link = download_info.direct_link
    filename = f"{track.artists[0].name} - {track.title}.mp3".replace("/", "_")

    response = requests.get(direct_link)
    with open(filename, "wb") as f:
        f.write(response.content)

    return filename

# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É, Spotify
async def handle_link(update: Update, query: str) -> None:
    if "yandex" in query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É
        track_id = extract_yandex_track_id(query)
        track = yandex_client.tracks(track_id)
        await update.message.reply_text(f"–¢—Ä–µ–∫ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏: {track.title} - {', '.join(artist.name for artist in track.artists)}")
    elif "spotify" in query:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Spotify
        track_id = extract_spotify_track_id(query)
        track = spotify_client.track(track_id)
        await update.message.reply_text(f"–¢—Ä–µ–∫ –∏–∑ Spotify: {track['name']} - {', '.join(artist['name'] for artist in track['artists'])}")

def extract_yandex_track_id(url: str) -> str:
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID —Ç—Ä–µ–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏
    return url.split('/')[-1]

def extract_spotify_track_id(url: str) -> str:
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID —Ç—Ä–µ–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ Spotify
    return url.split('/')[-1].split('?')[0]

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å –¥–ª—è PyCharm / Jupyter Notebook
nest_asyncio.apply()

async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search))
    app.add_handler(CallbackQueryHandler(handle_source_selection))
    app.add_handler(CallbackQueryHandler(button_click))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())  # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ```python